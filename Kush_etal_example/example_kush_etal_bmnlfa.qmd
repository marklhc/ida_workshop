---
title: "Bayesian MNLFA"
format:
  gfm:
    toc: true
  pdf:
    toc: true
---

## Load Packages

```{r}
# install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
# cmdstanr::install_cmdstan()
library(tidyr)
library(ggplot2)
library(cmdstanr)
library(here)
```

## Import Data

Data can be downloaded from <https://github.com/jmk7cj/SEM-mnlfa>.

```{r}
data <- read.csv(here::here("Kush_etal_example/SEM-mnlfa", "data.csv"))
# Define grouping variable
data$group <- data$study_id
# Sort data by group
data <- data[order(data$group), ]
head(data)
# Sample sizes
# Study 1 = FAST; Study 2 = LIFT; Study 3 = PIRC1;
# Study 4 = PIRC2; Study 5 = SAFE
table(data$study_id)
item_names <- names(data)[5:13]  # save item names
```

### Convert to long-format data

This is needed for handling missing data. See <https://mc-stan.org/docs/stan-users-guide/regression.html#item-response-models.section>.

```{r}
data_long <- data[c("id", "study_id", "sex", "race", item_names)] |>
    tidyr::pivot_longer(cols = -(id:race), names_to = "item", values_to = "y")
# Exclude missing observations
data_long_lw <- data_long[complete.cases(data_long[, "y"]), ]
```

## Bayesian MNLFA

The model is coded in the Stan language (see <https://mc-stan.org/docs/stan-users-guide/>). It uses regularization (hierarchical shrinkage prior; see <https://projecteuclid.org/journals/electronic-journal-of-statistics/volume-11/issue-2/Sparsity-information-and-regularization-in-the-horseshoe-and-other-shrinkage/10.1214/17-EJS1337SI.full>) to allow covariates to moderate loadings, intercepts, latent means, and the logarithm of latent SDs.

```{stan}
#| output.var: mnlfa_mod
#| file: "twopl_rev_mnlfa.stan"
#| eval: false
```

```{r}
# Compile the model
mnlfa_mod <- cmdstan_model("twopl_rev_mnlfa.stan")
```

```{r}
# Prepare data
stan_data <- list(
    J = length(unique(data_long_lw$id)),
    K = length(unique(data_long_lw$item)),
    N = nrow(data_long_lw),
    jj = as.numeric(factor(data_long_lw$id, levels = unique(data_long_lw$id))),
    kk = as.numeric(factor(data_long_lw$item)),
    y = data_long_lw$y,
    p = 4,
    # Predictors: LIFT, PIRC1, PIRC2, SAFE
    X = model.matrix(~ factor(study_id),
                     data = data_long_lw)[, -1]
)
```

```{r}
#| eval: false
# Sampling (this takes a long time)
mnlfa_fit <- mnlfa_mod$sample(
    data = stan_data,
    chains = 4,
    parallel_chains = 4,
    adapt_delta = 0.99,
    max_treedepth = 12,
    iter_warmup = 1000,
    iter_sampling = 1000
)
mnlfa_fit$save_object("mnlfa_fit.RDS")
```

### Extract harmonized scores

Using posterior means and SDs

```{r}
mnlfa_fit <- readRDS(here::here("Kush_etal_example", "mnlfa_fit.RDS"))
# Extract factor scores
fs_draws <- mnlfa_fit$summary("alpha")[c("mean", "sd")]
```

Compare to aligned factor scores

```{r}
fsg <- readRDS(here::here("Kush_etal_example", "fsg.RDS"))
plot(na.omit(fsg[, 1]), fs_draws$mean)
cor(na.omit(fsg[, 1]), fs_draws$mean)
```

## Descriptives

Add back Study ID

```{r}
fs_draws$study_id <- data$study_id[data$id %in% unique(data_long_lw$id)]
ggplot(fs_draws, aes(x = mean)) +
    geom_histogram() +
    facet_wrap(~ study_id) +
    labs(x = "EAP score")
```

### Reliability

```{r}
# Average reliability
rel_avg <- var(fs_draws$mean) /
    (var(fs_draws$mean) + mean(fs_draws$sd^2))
rel_avg
# Group-specific reliability
relg <- tapply(fs_draws, INDEX = fs_draws$study_id,
    FUN = \(x) var(x$mean) /
        (var(x$mean) + mean(x$sd^2)))
relg
```